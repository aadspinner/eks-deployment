image: docker:latest
services:
  - docker:dind
# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'
#     - when: never
before_script:
  - docker info

stages:
  - build
  - deploy

build:
  stage: build
  script:
    - docker build -t ramchdocker/custom-eks-image:latest .
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    - docker push ramchdocker/custom-eks-image:latest
  rules:
    - changes:
      - Dockerfile
      - src/**/*
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_BRANCH'

deploy:
  stage: deploy
  image: python:3.9-slim
  services:
    - docker:dind
  
  before_script:
  - apt-get update && apt-get install -y git
  - git config --global credential.helper cache
  - git clone https://github.com/aadspinner/eks-deployment.git
  - cd eks-deployment
  - source cluster-vars.sh
  - export AWS_DEFAULT_REGION=$REGION  # Correct region export ha
  - apt-get update && apt-get install -y curl unzip
  - ARCH=amd64
  - PLATFORM=$(uname -s)_$ARCH
  - curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
  - curl -sL "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_checksums.txt" | grep $PLATFORM | sha256sum --check
  - tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
  - mv /tmp/eksctl /usr/local/bin
  - eksctl version
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64-${AWSCLI_VERSION}.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install
  - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl
  - mv kubectl /usr/local/bin/
  script:
  - source cluster-vars.sh
  - export AWS_DEFAULT_REGION=$REGION
  - echo "Region from script:" $REGION
  
    # - aws sts get-caller-identity
    # - eksctl create cluster -f eks-manifest1.1.yaml --without-nodegroup
    # - kubectl delete daemonset -n kube-system aws-node
    # - kubectl apply -f caliconode.yaml
    # - eksctl create nodegroup -f eks-node-grp1.1.yaml
    # - eksctl update addon --name vpc-cni --cluster $CLUSTER_NAME --region $REGION
    # - eksctl utils associate-iam-oidc-provider --region $REGION --cluster $CLUSTER_NAME --approve
    # - aws eks update-kubeconfig --region $REGION --name $CLUSTER_NAME
    # - kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml
    # - eksctl create iamserviceaccount --name ebs-csi-controller-sa --namespace kube-system --cluster $CLUSTER_NAME --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy --approve
    # - kubectl apply -f ebs-csi-serviceaccount.yaml
    # - kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.35"
    # - kubectl apply -f eks-pvc.yaml
    # - kubectl apply -f eks-sc-3zones.yaml
